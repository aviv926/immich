-- NOTE: This file is auto generated by ./sql-generator

-- SchemaRepository.getTables
select
  *
from
  "information_schema"."tables"
where
  "table_schema" = $1
  and "table_type" = 'BASE TABLE'

-- SchemaRepository.getUserDefinedEnums
select
  "pg_type"."typname" as "name",
  (
    select
      coalesce(json_agg(agg), '[]')
    from
      (
        select
          "e"."enumlabel" as "value"
        from
          "pg_enum" as "e"
        where
          "e"."enumtypid" = "pg_type"."oid"
      ) as agg
  ) as "values"
from
  "pg_type"
  inner join "pg_namespace" on "pg_namespace"."oid" = "pg_type"."typnamespace"
  and "pg_namespace"."nspname" = $1
where
  "typtype" = 'e'

-- SchemaRepository.getTableColumns
select
  "c"."table_name",
  "c"."column_name",
  "c"."data_type",
  "c"."column_default",
  "c"."is_nullable",
  "c"."numeric_precision",
  "c"."numeric_scale",
  "c"."datetime_precision",
  "c"."udt_catalog",
  "c"."udt_schema",
  "c"."udt_name",
  "o"."data_type" as "array_type"
from
  "information_schema"."columns" as "c"
  left join "information_schema"."element_types" as "o" on "c"."table_catalog" = "o"."object_catalog"
  and "c"."table_schema" = "o"."object_schema"
  and "c"."table_name" = "o"."object_name"
  and "o"."object_type" = 'TABLE'
  and "c"."dtd_identifier" = "o"."collection_type_identifier"
  left join "pg_type" as "t" on "t"."typname" = "c"."udt_name"
  and "c"."data_type" = 'USER-DEFINED'
  left join "pg_enum" as "e" on "e"."enumtypid" = "t"."oid"
where
  "table_schema" = $1

-- SchemaRepository.getTableIndexes
select
  "i"."relname" as "index_name",
  "t"."relname" as "table_name",
  "ix"."indisunique" as "unique",
  pg_get_expr("ix"."indexprs", "ix"."indrelid") as "expression",
  pg_get_expr("ix"."indpred", "ix"."indrelid") as "where",
  (
    select
      json_agg("a"."attname") as "column_name"
    from
      "pg_attribute" as "a"
    where
      "t"."relkind" = 'r'
      and "a"."attrelid" = "t"."oid"
      and "a"."attnum" = any ("ix"."indkey")
  ) as "column_names"
from
  "pg_index" as "ix"
  inner join "pg_class" as "i" on "ix"."indexrelid" = "i"."oid"
  inner join "pg_class" as "t" on "ix"."indrelid" = "t"."oid"
  inner join "pg_namespace" on "pg_namespace"."oid" = "i"."relnamespace"
  left join "pg_constraint" on "pg_constraint"."conindid" = "i"."oid"
  and "pg_constraint"."contype" in ('p', 'u')
where
  "pg_constraint"."oid" is null
  and "pg_namespace"."nspname" = $1
  and "ix"."indisprimary" = false

-- SchemaRepository.getTableConstraints
select
  "pg_constraint"."contype" as "constraint_type",
  "pg_constraint"."conname" as "constraint_name",
  "source_table"."relname" as "table_name",
  "reference_table"."relname" as "reference_table_name",
  "pg_constraint"."confupdtype" as "update_action",
  "pg_constraint"."confdeltype" as "delete_action",
  (
    select
      json_agg("pg_attribute"."attname") as "column_name"
    from
      "pg_attribute"
    where
      "pg_attribute"."attrelid" = "pg_constraint"."conrelid"
      and "pg_attribute"."attnum" = any ("pg_constraint"."conkey")
  ) as "column_names",
  (
    select
      json_agg("pg_attribute"."attname") as "column_name"
    from
      "pg_attribute"
    where
      "pg_attribute"."attrelid" = "pg_constraint"."confrelid"
      and "pg_attribute"."attnum" = any ("pg_constraint"."confkey")
  ) as "reference_column_names",
  pg_get_constraintdef("pg_constraint"."oid") as "expression"
from
  "pg_constraint"
  inner join "pg_namespace" on "pg_namespace"."oid" = "pg_constraint"."connamespace"
  inner join "pg_class" as "source_table" on "source_table"."oid" = "pg_constraint"."conrelid"
  and "source_table"."relkind" in ('r', 'p', 'f')
  left join "pg_class" as "reference_table" on "reference_table"."oid" = "pg_constraint"."confrelid"
where
  "pg_namespace"."nspname" = $1
